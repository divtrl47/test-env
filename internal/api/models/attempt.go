// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Attempt attempt
//
// swagger:model Attempt
type Attempt struct {

	// Attempt identifier
	// Required: true
	ID *int64 `json:"id"`

	// Attempt status
	// Required: true
	// Enum: [pending correct incorrect]
	Status *string `json:"status"`

	// Text of attempt
	// Required: true
	Text *string `json:"text"`

	// Time of attempt
	// Required: true
	// Format: date-time
	Time *strfmt.DateTime `json:"time"`
}

// Validate validates this attempt
func (m *Attempt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Attempt) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var attemptTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","correct","incorrect"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attemptTypeStatusPropEnum = append(attemptTypeStatusPropEnum, v)
	}
}

const (

	// AttemptStatusPending captures enum value "pending"
	AttemptStatusPending string = "pending"

	// AttemptStatusCorrect captures enum value "correct"
	AttemptStatusCorrect string = "correct"

	// AttemptStatusIncorrect captures enum value "incorrect"
	AttemptStatusIncorrect string = "incorrect"
)

// prop value enum
func (m *Attempt) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attemptTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Attempt) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Attempt) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

func (m *Attempt) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this attempt based on context it is used
func (m *Attempt) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Attempt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Attempt) UnmarshalBinary(b []byte) error {
	var res Attempt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
