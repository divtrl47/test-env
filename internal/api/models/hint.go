// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Hint hint
//
// swagger:model Hint
type Hint struct {

	// Hint identifier
	// Required: true
	ID *int64 `json:"id"`

	// Hint status
	// Required: true
	// Enum: [hidden open]
	Status *string `json:"status"`

	// Hint text, omitted when status is hidden
	Text *string `json:"text,omitempty"`
}

// Validate validates this hint
func (m *Hint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Hint) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var hintTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hidden","open"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hintTypeStatusPropEnum = append(hintTypeStatusPropEnum, v)
	}
}

const (

	// HintStatusHidden captures enum value "hidden"
	HintStatusHidden string = "hidden"

	// HintStatusOpen captures enum value "open"
	HintStatusOpen string = "open"
)

// prop value enum
func (m *Hint) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hintTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Hint) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hint based on context it is used
func (m *Hint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Hint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Hint) UnmarshalBinary(b []byte) error {
	var res Hint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
