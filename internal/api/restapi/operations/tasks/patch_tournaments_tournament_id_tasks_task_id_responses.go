// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"kafka-playground/internal/api/models"
)

// PatchTournamentsTournamentIDTasksTaskIDOKCode is the HTTP code returned for type PatchTournamentsTournamentIDTasksTaskIDOK
const PatchTournamentsTournamentIDTasksTaskIDOKCode int = 200

/*
PatchTournamentsTournamentIDTasksTaskIDOK Answer processed

swagger:response patchTournamentsTournamentIdTasksTaskIdOK
*/
type PatchTournamentsTournamentIDTasksTaskIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.TaskAnswerResponse `json:"body,omitempty"`
}

// NewPatchTournamentsTournamentIDTasksTaskIDOK creates PatchTournamentsTournamentIDTasksTaskIDOK with default headers values
func NewPatchTournamentsTournamentIDTasksTaskIDOK() *PatchTournamentsTournamentIDTasksTaskIDOK {

	return &PatchTournamentsTournamentIDTasksTaskIDOK{}
}

// WithPayload adds the payload to the patch tournaments tournament Id tasks task Id o k response
func (o *PatchTournamentsTournamentIDTasksTaskIDOK) WithPayload(payload *models.TaskAnswerResponse) *PatchTournamentsTournamentIDTasksTaskIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tournaments tournament Id tasks task Id o k response
func (o *PatchTournamentsTournamentIDTasksTaskIDOK) SetPayload(payload *models.TaskAnswerResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTournamentsTournamentIDTasksTaskIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchTournamentsTournamentIDTasksTaskIDBadRequestCode is the HTTP code returned for type PatchTournamentsTournamentIDTasksTaskIDBadRequest
const PatchTournamentsTournamentIDTasksTaskIDBadRequestCode int = 400

/*
PatchTournamentsTournamentIDTasksTaskIDBadRequest Bad request

swagger:response patchTournamentsTournamentIdTasksTaskIdBadRequest
*/
type PatchTournamentsTournamentIDTasksTaskIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchTournamentsTournamentIDTasksTaskIDBadRequest creates PatchTournamentsTournamentIDTasksTaskIDBadRequest with default headers values
func NewPatchTournamentsTournamentIDTasksTaskIDBadRequest() *PatchTournamentsTournamentIDTasksTaskIDBadRequest {

	return &PatchTournamentsTournamentIDTasksTaskIDBadRequest{}
}

// WithPayload adds the payload to the patch tournaments tournament Id tasks task Id bad request response
func (o *PatchTournamentsTournamentIDTasksTaskIDBadRequest) WithPayload(payload *models.Error) *PatchTournamentsTournamentIDTasksTaskIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tournaments tournament Id tasks task Id bad request response
func (o *PatchTournamentsTournamentIDTasksTaskIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTournamentsTournamentIDTasksTaskIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchTournamentsTournamentIDTasksTaskIDUnauthorizedCode is the HTTP code returned for type PatchTournamentsTournamentIDTasksTaskIDUnauthorized
const PatchTournamentsTournamentIDTasksTaskIDUnauthorizedCode int = 401

/*
PatchTournamentsTournamentIDTasksTaskIDUnauthorized Unauthorized

swagger:response patchTournamentsTournamentIdTasksTaskIdUnauthorized
*/
type PatchTournamentsTournamentIDTasksTaskIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchTournamentsTournamentIDTasksTaskIDUnauthorized creates PatchTournamentsTournamentIDTasksTaskIDUnauthorized with default headers values
func NewPatchTournamentsTournamentIDTasksTaskIDUnauthorized() *PatchTournamentsTournamentIDTasksTaskIDUnauthorized {

	return &PatchTournamentsTournamentIDTasksTaskIDUnauthorized{}
}

// WithPayload adds the payload to the patch tournaments tournament Id tasks task Id unauthorized response
func (o *PatchTournamentsTournamentIDTasksTaskIDUnauthorized) WithPayload(payload *models.Error) *PatchTournamentsTournamentIDTasksTaskIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tournaments tournament Id tasks task Id unauthorized response
func (o *PatchTournamentsTournamentIDTasksTaskIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTournamentsTournamentIDTasksTaskIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchTournamentsTournamentIDTasksTaskIDForbiddenCode is the HTTP code returned for type PatchTournamentsTournamentIDTasksTaskIDForbidden
const PatchTournamentsTournamentIDTasksTaskIDForbiddenCode int = 403

/*
PatchTournamentsTournamentIDTasksTaskIDForbidden Forbidden

swagger:response patchTournamentsTournamentIdTasksTaskIdForbidden
*/
type PatchTournamentsTournamentIDTasksTaskIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchTournamentsTournamentIDTasksTaskIDForbidden creates PatchTournamentsTournamentIDTasksTaskIDForbidden with default headers values
func NewPatchTournamentsTournamentIDTasksTaskIDForbidden() *PatchTournamentsTournamentIDTasksTaskIDForbidden {

	return &PatchTournamentsTournamentIDTasksTaskIDForbidden{}
}

// WithPayload adds the payload to the patch tournaments tournament Id tasks task Id forbidden response
func (o *PatchTournamentsTournamentIDTasksTaskIDForbidden) WithPayload(payload *models.Error) *PatchTournamentsTournamentIDTasksTaskIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tournaments tournament Id tasks task Id forbidden response
func (o *PatchTournamentsTournamentIDTasksTaskIDForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTournamentsTournamentIDTasksTaskIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchTournamentsTournamentIDTasksTaskIDNotFoundCode is the HTTP code returned for type PatchTournamentsTournamentIDTasksTaskIDNotFound
const PatchTournamentsTournamentIDTasksTaskIDNotFoundCode int = 404

/*
PatchTournamentsTournamentIDTasksTaskIDNotFound Resource not found

swagger:response patchTournamentsTournamentIdTasksTaskIdNotFound
*/
type PatchTournamentsTournamentIDTasksTaskIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchTournamentsTournamentIDTasksTaskIDNotFound creates PatchTournamentsTournamentIDTasksTaskIDNotFound with default headers values
func NewPatchTournamentsTournamentIDTasksTaskIDNotFound() *PatchTournamentsTournamentIDTasksTaskIDNotFound {

	return &PatchTournamentsTournamentIDTasksTaskIDNotFound{}
}

// WithPayload adds the payload to the patch tournaments tournament Id tasks task Id not found response
func (o *PatchTournamentsTournamentIDTasksTaskIDNotFound) WithPayload(payload *models.Error) *PatchTournamentsTournamentIDTasksTaskIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tournaments tournament Id tasks task Id not found response
func (o *PatchTournamentsTournamentIDTasksTaskIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTournamentsTournamentIDTasksTaskIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
