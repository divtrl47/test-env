// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"kafka-playground/internal/api/models"
)

// GetTournamentsTournamentIDTasksTaskIDOKCode is the HTTP code returned for type GetTournamentsTournamentIDTasksTaskIDOK
const GetTournamentsTournamentIDTasksTaskIDOKCode int = 200

/*
GetTournamentsTournamentIDTasksTaskIDOK Team task details

swagger:response getTournamentsTournamentIdTasksTaskIdOK
*/
type GetTournamentsTournamentIDTasksTaskIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.TeamTask `json:"body,omitempty"`
}

// NewGetTournamentsTournamentIDTasksTaskIDOK creates GetTournamentsTournamentIDTasksTaskIDOK with default headers values
func NewGetTournamentsTournamentIDTasksTaskIDOK() *GetTournamentsTournamentIDTasksTaskIDOK {

	return &GetTournamentsTournamentIDTasksTaskIDOK{}
}

// WithPayload adds the payload to the get tournaments tournament Id tasks task Id o k response
func (o *GetTournamentsTournamentIDTasksTaskIDOK) WithPayload(payload *models.TeamTask) *GetTournamentsTournamentIDTasksTaskIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tournaments tournament Id tasks task Id o k response
func (o *GetTournamentsTournamentIDTasksTaskIDOK) SetPayload(payload *models.TeamTask) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTournamentsTournamentIDTasksTaskIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTournamentsTournamentIDTasksTaskIDUnauthorizedCode is the HTTP code returned for type GetTournamentsTournamentIDTasksTaskIDUnauthorized
const GetTournamentsTournamentIDTasksTaskIDUnauthorizedCode int = 401

/*
GetTournamentsTournamentIDTasksTaskIDUnauthorized Unauthorized

swagger:response getTournamentsTournamentIdTasksTaskIdUnauthorized
*/
type GetTournamentsTournamentIDTasksTaskIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTournamentsTournamentIDTasksTaskIDUnauthorized creates GetTournamentsTournamentIDTasksTaskIDUnauthorized with default headers values
func NewGetTournamentsTournamentIDTasksTaskIDUnauthorized() *GetTournamentsTournamentIDTasksTaskIDUnauthorized {

	return &GetTournamentsTournamentIDTasksTaskIDUnauthorized{}
}

// WithPayload adds the payload to the get tournaments tournament Id tasks task Id unauthorized response
func (o *GetTournamentsTournamentIDTasksTaskIDUnauthorized) WithPayload(payload *models.Error) *GetTournamentsTournamentIDTasksTaskIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tournaments tournament Id tasks task Id unauthorized response
func (o *GetTournamentsTournamentIDTasksTaskIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTournamentsTournamentIDTasksTaskIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTournamentsTournamentIDTasksTaskIDForbiddenCode is the HTTP code returned for type GetTournamentsTournamentIDTasksTaskIDForbidden
const GetTournamentsTournamentIDTasksTaskIDForbiddenCode int = 403

/*
GetTournamentsTournamentIDTasksTaskIDForbidden Forbidden

swagger:response getTournamentsTournamentIdTasksTaskIdForbidden
*/
type GetTournamentsTournamentIDTasksTaskIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTournamentsTournamentIDTasksTaskIDForbidden creates GetTournamentsTournamentIDTasksTaskIDForbidden with default headers values
func NewGetTournamentsTournamentIDTasksTaskIDForbidden() *GetTournamentsTournamentIDTasksTaskIDForbidden {

	return &GetTournamentsTournamentIDTasksTaskIDForbidden{}
}

// WithPayload adds the payload to the get tournaments tournament Id tasks task Id forbidden response
func (o *GetTournamentsTournamentIDTasksTaskIDForbidden) WithPayload(payload *models.Error) *GetTournamentsTournamentIDTasksTaskIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tournaments tournament Id tasks task Id forbidden response
func (o *GetTournamentsTournamentIDTasksTaskIDForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTournamentsTournamentIDTasksTaskIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTournamentsTournamentIDTasksTaskIDNotFoundCode is the HTTP code returned for type GetTournamentsTournamentIDTasksTaskIDNotFound
const GetTournamentsTournamentIDTasksTaskIDNotFoundCode int = 404

/*
GetTournamentsTournamentIDTasksTaskIDNotFound Resource not found

swagger:response getTournamentsTournamentIdTasksTaskIdNotFound
*/
type GetTournamentsTournamentIDTasksTaskIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTournamentsTournamentIDTasksTaskIDNotFound creates GetTournamentsTournamentIDTasksTaskIDNotFound with default headers values
func NewGetTournamentsTournamentIDTasksTaskIDNotFound() *GetTournamentsTournamentIDTasksTaskIDNotFound {

	return &GetTournamentsTournamentIDTasksTaskIDNotFound{}
}

// WithPayload adds the payload to the get tournaments tournament Id tasks task Id not found response
func (o *GetTournamentsTournamentIDTasksTaskIDNotFound) WithPayload(payload *models.Error) *GetTournamentsTournamentIDTasksTaskIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tournaments tournament Id tasks task Id not found response
func (o *GetTournamentsTournamentIDTasksTaskIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTournamentsTournamentIDTasksTaskIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
