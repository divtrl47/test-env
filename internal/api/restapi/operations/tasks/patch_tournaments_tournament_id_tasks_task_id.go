// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchTournamentsTournamentIDTasksTaskIDHandlerFunc turns a function with the right signature into a patch tournaments tournament ID tasks task ID handler
type PatchTournamentsTournamentIDTasksTaskIDHandlerFunc func(PatchTournamentsTournamentIDTasksTaskIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchTournamentsTournamentIDTasksTaskIDHandlerFunc) Handle(params PatchTournamentsTournamentIDTasksTaskIDParams) middleware.Responder {
	return fn(params)
}

// PatchTournamentsTournamentIDTasksTaskIDHandler interface for that can handle valid patch tournaments tournament ID tasks task ID params
type PatchTournamentsTournamentIDTasksTaskIDHandler interface {
	Handle(PatchTournamentsTournamentIDTasksTaskIDParams) middleware.Responder
}

// NewPatchTournamentsTournamentIDTasksTaskID creates a new http.Handler for the patch tournaments tournament ID tasks task ID operation
func NewPatchTournamentsTournamentIDTasksTaskID(ctx *middleware.Context, handler PatchTournamentsTournamentIDTasksTaskIDHandler) *PatchTournamentsTournamentIDTasksTaskID {
	return &PatchTournamentsTournamentIDTasksTaskID{Context: ctx, Handler: handler}
}

/*
	PatchTournamentsTournamentIDTasksTaskID swagger:route PATCH /tournaments/{tournamentId}/tasks/{taskId} tasks patchTournamentsTournamentIdTasksTaskId

Submit answer for task
*/
type PatchTournamentsTournamentIDTasksTaskID struct {
	Context *middleware.Context
	Handler PatchTournamentsTournamentIDTasksTaskIDHandler
}

func (o *PatchTournamentsTournamentIDTasksTaskID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchTournamentsTournamentIDTasksTaskIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
