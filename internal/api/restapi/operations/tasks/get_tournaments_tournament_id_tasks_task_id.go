// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTournamentsTournamentIDTasksTaskIDHandlerFunc turns a function with the right signature into a get tournaments tournament ID tasks task ID handler
type GetTournamentsTournamentIDTasksTaskIDHandlerFunc func(GetTournamentsTournamentIDTasksTaskIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTournamentsTournamentIDTasksTaskIDHandlerFunc) Handle(params GetTournamentsTournamentIDTasksTaskIDParams) middleware.Responder {
	return fn(params)
}

// GetTournamentsTournamentIDTasksTaskIDHandler interface for that can handle valid get tournaments tournament ID tasks task ID params
type GetTournamentsTournamentIDTasksTaskIDHandler interface {
	Handle(GetTournamentsTournamentIDTasksTaskIDParams) middleware.Responder
}

// NewGetTournamentsTournamentIDTasksTaskID creates a new http.Handler for the get tournaments tournament ID tasks task ID operation
func NewGetTournamentsTournamentIDTasksTaskID(ctx *middleware.Context, handler GetTournamentsTournamentIDTasksTaskIDHandler) *GetTournamentsTournamentIDTasksTaskID {
	return &GetTournamentsTournamentIDTasksTaskID{Context: ctx, Handler: handler}
}

/*
	GetTournamentsTournamentIDTasksTaskID swagger:route GET /tournaments/{tournamentId}/tasks/{taskId} tasks getTournamentsTournamentIdTasksTaskId

Get task details
*/
type GetTournamentsTournamentIDTasksTaskID struct {
	Context *middleware.Context
	Handler GetTournamentsTournamentIDTasksTaskIDHandler
}

func (o *GetTournamentsTournamentIDTasksTaskID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTournamentsTournamentIDTasksTaskIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
