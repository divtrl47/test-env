// Code generated by go-swagger; DO NOT EDIT.

package tournaments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTournamentsHandlerFunc turns a function with the right signature into a get tournaments handler
type GetTournamentsHandlerFunc func(GetTournamentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTournamentsHandlerFunc) Handle(params GetTournamentsParams) middleware.Responder {
	return fn(params)
}

// GetTournamentsHandler interface for that can handle valid get tournaments params
type GetTournamentsHandler interface {
	Handle(GetTournamentsParams) middleware.Responder
}

// NewGetTournaments creates a new http.Handler for the get tournaments operation
func NewGetTournaments(ctx *middleware.Context, handler GetTournamentsHandler) *GetTournaments {
	return &GetTournaments{Context: ctx, Handler: handler}
}

/*
	GetTournaments swagger:route GET /tournaments tournaments getTournaments

Get active tournament and leaderboard
*/
type GetTournaments struct {
	Context *middleware.Context
	Handler GetTournamentsHandler
}

func (o *GetTournaments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTournamentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
