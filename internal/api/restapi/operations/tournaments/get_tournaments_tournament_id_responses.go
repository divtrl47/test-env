// Code generated by go-swagger; DO NOT EDIT.

package tournaments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"kafka-playground/internal/api/models"
)

// GetTournamentsTournamentIDOKCode is the HTTP code returned for type GetTournamentsTournamentIDOK
const GetTournamentsTournamentIDOKCode int = 200

/*
GetTournamentsTournamentIDOK Tournament details

swagger:response getTournamentsTournamentIdOK
*/
type GetTournamentsTournamentIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Tournament `json:"body,omitempty"`
}

// NewGetTournamentsTournamentIDOK creates GetTournamentsTournamentIDOK with default headers values
func NewGetTournamentsTournamentIDOK() *GetTournamentsTournamentIDOK {

	return &GetTournamentsTournamentIDOK{}
}

// WithPayload adds the payload to the get tournaments tournament Id o k response
func (o *GetTournamentsTournamentIDOK) WithPayload(payload *models.Tournament) *GetTournamentsTournamentIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tournaments tournament Id o k response
func (o *GetTournamentsTournamentIDOK) SetPayload(payload *models.Tournament) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTournamentsTournamentIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTournamentsTournamentIDUnauthorizedCode is the HTTP code returned for type GetTournamentsTournamentIDUnauthorized
const GetTournamentsTournamentIDUnauthorizedCode int = 401

/*
GetTournamentsTournamentIDUnauthorized Unauthorized

swagger:response getTournamentsTournamentIdUnauthorized
*/
type GetTournamentsTournamentIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTournamentsTournamentIDUnauthorized creates GetTournamentsTournamentIDUnauthorized with default headers values
func NewGetTournamentsTournamentIDUnauthorized() *GetTournamentsTournamentIDUnauthorized {

	return &GetTournamentsTournamentIDUnauthorized{}
}

// WithPayload adds the payload to the get tournaments tournament Id unauthorized response
func (o *GetTournamentsTournamentIDUnauthorized) WithPayload(payload *models.Error) *GetTournamentsTournamentIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tournaments tournament Id unauthorized response
func (o *GetTournamentsTournamentIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTournamentsTournamentIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTournamentsTournamentIDForbiddenCode is the HTTP code returned for type GetTournamentsTournamentIDForbidden
const GetTournamentsTournamentIDForbiddenCode int = 403

/*
GetTournamentsTournamentIDForbidden Forbidden

swagger:response getTournamentsTournamentIdForbidden
*/
type GetTournamentsTournamentIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTournamentsTournamentIDForbidden creates GetTournamentsTournamentIDForbidden with default headers values
func NewGetTournamentsTournamentIDForbidden() *GetTournamentsTournamentIDForbidden {

	return &GetTournamentsTournamentIDForbidden{}
}

// WithPayload adds the payload to the get tournaments tournament Id forbidden response
func (o *GetTournamentsTournamentIDForbidden) WithPayload(payload *models.Error) *GetTournamentsTournamentIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tournaments tournament Id forbidden response
func (o *GetTournamentsTournamentIDForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTournamentsTournamentIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
