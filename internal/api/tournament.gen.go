// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for HintStatus.
const (
	HintStatusClosed HintStatus = "closed"
	HintStatusOpen   HintStatus = "open"
)

// Defines values for HintOpenRequestStatus.
const (
	HintOpenRequestStatusOpen HintOpenRequestStatus = "open"
)

// Defines values for TaskAttemptsStatus.
const (
	TaskAttemptsStatusCorrect   TaskAttemptsStatus = "correct"
	TaskAttemptsStatusIncorrect TaskAttemptsStatus = "incorrect"
	TaskAttemptsStatusPending   TaskAttemptsStatus = "pending"
)

// Defines values for TaskHintsStatus.
const (
	TaskHintsStatusClosed TaskHintsStatus = "closed"
	TaskHintsStatusOpen   TaskHintsStatus = "open"
)

// Defines values for TaskStatus.
const (
	TaskStatusDone    TaskStatus = "done"
	TaskStatusPending TaskStatus = "pending"
)

// Defines values for TaskAnswerResponseStatus.
const (
	TaskAnswerResponseStatusCorrect   TaskAnswerResponseStatus = "correct"
	TaskAnswerResponseStatusIncorrect TaskAnswerResponseStatus = "incorrect"
)

// Defines values for TournamentAttemptsStatus.
const (
	TournamentAttemptsStatusCorrect   TournamentAttemptsStatus = "correct"
	TournamentAttemptsStatusIncorrect TournamentAttemptsStatus = "incorrect"
	TournamentAttemptsStatusPending   TournamentAttemptsStatus = "pending"
)

// Defines values for TournamentHintsStatus.
const (
	TournamentHintsStatusClosed TournamentHintsStatus = "closed"
	TournamentHintsStatusOpen   TournamentHintsStatus = "open"
)

// Defines values for TournamentStatus.
const (
	Done       TournamentStatus = "done"
	InProgress TournamentStatus = "in_progress"
)

// Defines values for TournamentOverviewTeamsTasksStatus.
const (
	Pending TournamentOverviewTeamsTasksStatus = "pending"
	Solved  TournamentOverviewTeamsTasksStatus = "solved"
)

// Error defines model for Error.
type Error struct {
	// Code Application-specific error code
	Code int `json:"code"`

	// Message Human readable error description
	Message string `json:"message"`
}

// Hint defines model for Hint.
type Hint struct {
	// Id Hint identifier
	Id int `json:"id"`

	// Status Hint status
	Status HintStatus `json:"status"`

	// Text Hint text, omitted when status is closed
	Text *string `json:"text"`
}

// HintStatus Hint status
type HintStatus string

// HintOpenRequest defines model for HintOpenRequest.
type HintOpenRequest struct {
	// Status Desired hint status
	Status HintOpenRequestStatus `json:"status"`
}

// HintOpenRequestStatus Desired hint status
type HintOpenRequestStatus string

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Login User login
	Login string `json:"login"`

	// Password User password
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// TournamentId Identifier of available tournament
	TournamentId int64 `json:"tournament_id"`
}

// Task defines model for Task.
type Task struct {
	Attempts []struct {
		// Id Attempt identifier
		Id int `json:"id"`

		// Status Attempt status
		Status TaskAttemptsStatus `json:"status"`

		// Text Text of attempt
		Text string `json:"text"`
	} `json:"attempts"`
	Hints []struct {
		// Id Hint identifier
		Id int `json:"id"`

		// Status Hint status
		Status TaskHintsStatus `json:"status"`

		// Text Hint text, omitted when status is closed
		Text *string `json:"text"`
	} `json:"hints"`

	// Id Task identifier
	Id int `json:"id"`

	// Name Task name
	Name string `json:"name"`

	// Status Task status
	Status TaskStatus `json:"status"`

	// Text Task text
	Text string `json:"text"`
}

// TaskAttemptsStatus Attempt status
type TaskAttemptsStatus string

// TaskHintsStatus Hint status
type TaskHintsStatus string

// TaskStatus Task status
type TaskStatus string

// TaskAnswerRequest defines model for TaskAnswerRequest.
type TaskAnswerRequest struct {
	// Answer User submitted answer
	Answer string `json:"answer"`
}

// TaskAnswerResponse defines model for TaskAnswerResponse.
type TaskAnswerResponse struct {
	// Status Result of attempt
	Status TaskAnswerResponseStatus `json:"status"`
}

// TaskAnswerResponseStatus Result of attempt
type TaskAnswerResponseStatus string

// Tournament defines model for Tournament.
type Tournament struct {
	Attempts []struct {
		// Id Attempt identifier
		Id int `json:"id"`

		// Status Attempt status
		Status TournamentAttemptsStatus `json:"status"`

		// Text Text of attempt
		Text string `json:"text"`
	} `json:"attempts"`

	// Coords Geographic coordinates
	Coords string `json:"coords"`

	// Description Tournament description
	Description string `json:"description"`
	Hints       []struct {
		// Id Hint identifier
		Id int `json:"id"`

		// Status Hint status
		Status TournamentHintsStatus `json:"status"`

		// Text Hint text, omitted when status is closed
		Text *string `json:"text"`
	} `json:"hints"`

	// Id Tournament identifier
	Id int `json:"id"`

	// Name Tournament name
	Name string `json:"name"`

	// Status Current tournament status
	Status TournamentStatus `json:"status"`
}

// TournamentAttemptsStatus Attempt status
type TournamentAttemptsStatus string

// TournamentHintsStatus Hint status
type TournamentHintsStatus string

// TournamentStatus Current tournament status
type TournamentStatus string

// TournamentOverview defines model for TournamentOverview.
type TournamentOverview struct {
	// Id Tournament identifier
	Id int `json:"id"`

	// Name Tournament name
	Name string `json:"name"`

	// Teams Teams ordered by tournament results
	Teams []struct {
		// Completed Number of completed tasks
		Completed int `json:"completed"`

		// Id Team identifier
		Id int `json:"id"`

		// Login Login used by the team
		Login string `json:"login"`

		// Name Team name
		Name string `json:"name"`

		// Penalty Penalty time in seconds
		Penalty int `json:"penalty"`

		// Place Team place in tournament
		Place int `json:"place"`
		Tasks []struct {
			// Name Task name
			Name string `json:"name"`

			// Status Task status for team
			Status TournamentOverviewTeamsTasksStatus `json:"status"`
		} `json:"tasks"`
	} `json:"teams"`
}

// TournamentOverviewTeamsTasksStatus Task status for team
type TournamentOverviewTeamsTasksStatus string

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// PatchTournamentsTournamentIdTasksTaskIdJSONRequestBody defines body for PatchTournamentsTournamentIdTasksTaskId for application/json ContentType.
type PatchTournamentsTournamentIdTasksTaskIdJSONRequestBody = TaskAnswerRequest

// PatchTournamentsTournamentIdTasksTaskIdHintsHintIdJSONRequestBody defines body for PatchTournamentsTournamentIdTasksTaskIdHintsHintId for application/json ContentType.
type PatchTournamentsTournamentIdTasksTaskIdHintsHintIdJSONRequestBody = HintOpenRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate user
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// Get active tournament and leaderboard
	// (GET /tournaments)
	GetTournaments(w http.ResponseWriter, r *http.Request)
	// Get tournament details
	// (GET /tournaments/{tournamentId}/)
	GetTournamentsTournamentId(w http.ResponseWriter, r *http.Request, tournamentId int)
	// Get task details
	// (GET /tournaments/{tournamentId}/tasks/{taskId})
	GetTournamentsTournamentIdTasksTaskId(w http.ResponseWriter, r *http.Request, tournamentId int, taskId int)
	// Submit answer for task
	// (PATCH /tournaments/{tournamentId}/tasks/{taskId})
	PatchTournamentsTournamentIdTasksTaskId(w http.ResponseWriter, r *http.Request, tournamentId int, taskId int)
	// Get hint details
	// (GET /tournaments/{tournamentId}/tasks/{taskId}/hints/{hintId})
	GetTournamentsTournamentIdTasksTaskIdHintsHintId(w http.ResponseWriter, r *http.Request, tournamentId int, taskId int, hintId int)
	// Open hint for task
	// (PATCH /tournaments/{tournamentId}/tasks/{taskId}/hints/{hintId})
	PatchTournamentsTournamentIdTasksTaskIdHintsHintId(w http.ResponseWriter, r *http.Request, tournamentId int, taskId int, hintId int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Authenticate user
// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get active tournament and leaderboard
// (GET /tournaments)
func (_ Unimplemented) GetTournaments(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tournament details
// (GET /tournaments/{tournamentId}/)
func (_ Unimplemented) GetTournamentsTournamentId(w http.ResponseWriter, r *http.Request, tournamentId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get task details
// (GET /tournaments/{tournamentId}/tasks/{taskId})
func (_ Unimplemented) GetTournamentsTournamentIdTasksTaskId(w http.ResponseWriter, r *http.Request, tournamentId int, taskId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Submit answer for task
// (PATCH /tournaments/{tournamentId}/tasks/{taskId})
func (_ Unimplemented) PatchTournamentsTournamentIdTasksTaskId(w http.ResponseWriter, r *http.Request, tournamentId int, taskId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get hint details
// (GET /tournaments/{tournamentId}/tasks/{taskId}/hints/{hintId})
func (_ Unimplemented) GetTournamentsTournamentIdTasksTaskIdHintsHintId(w http.ResponseWriter, r *http.Request, tournamentId int, taskId int, hintId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Open hint for task
// (PATCH /tournaments/{tournamentId}/tasks/{taskId}/hints/{hintId})
func (_ Unimplemented) PatchTournamentsTournamentIdTasksTaskIdHintsHintId(w http.ResponseWriter, r *http.Request, tournamentId int, taskId int, hintId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTournaments operation middleware
func (siw *ServerInterfaceWrapper) GetTournaments(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTournaments(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTournamentsTournamentId operation middleware
func (siw *ServerInterfaceWrapper) GetTournamentsTournamentId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tournamentId" -------------
	var tournamentId int

	err = runtime.BindStyledParameterWithOptions("simple", "tournamentId", chi.URLParam(r, "tournamentId"), &tournamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tournamentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTournamentsTournamentId(w, r, tournamentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTournamentsTournamentIdTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) GetTournamentsTournamentIdTasksTaskId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tournamentId" -------------
	var tournamentId int

	err = runtime.BindStyledParameterWithOptions("simple", "tournamentId", chi.URLParam(r, "tournamentId"), &tournamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tournamentId", Err: err})
		return
	}

	// ------------- Path parameter "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTournamentsTournamentIdTasksTaskId(w, r, tournamentId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchTournamentsTournamentIdTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) PatchTournamentsTournamentIdTasksTaskId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tournamentId" -------------
	var tournamentId int

	err = runtime.BindStyledParameterWithOptions("simple", "tournamentId", chi.URLParam(r, "tournamentId"), &tournamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tournamentId", Err: err})
		return
	}

	// ------------- Path parameter "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchTournamentsTournamentIdTasksTaskId(w, r, tournamentId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTournamentsTournamentIdTasksTaskIdHintsHintId operation middleware
func (siw *ServerInterfaceWrapper) GetTournamentsTournamentIdTasksTaskIdHintsHintId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tournamentId" -------------
	var tournamentId int

	err = runtime.BindStyledParameterWithOptions("simple", "tournamentId", chi.URLParam(r, "tournamentId"), &tournamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tournamentId", Err: err})
		return
	}

	// ------------- Path parameter "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	// ------------- Path parameter "hintId" -------------
	var hintId int

	err = runtime.BindStyledParameterWithOptions("simple", "hintId", chi.URLParam(r, "hintId"), &hintId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hintId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTournamentsTournamentIdTasksTaskIdHintsHintId(w, r, tournamentId, taskId, hintId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchTournamentsTournamentIdTasksTaskIdHintsHintId operation middleware
func (siw *ServerInterfaceWrapper) PatchTournamentsTournamentIdTasksTaskIdHintsHintId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tournamentId" -------------
	var tournamentId int

	err = runtime.BindStyledParameterWithOptions("simple", "tournamentId", chi.URLParam(r, "tournamentId"), &tournamentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tournamentId", Err: err})
		return
	}

	// ------------- Path parameter "taskId" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", chi.URLParam(r, "taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	// ------------- Path parameter "hintId" -------------
	var hintId int

	err = runtime.BindStyledParameterWithOptions("simple", "hintId", chi.URLParam(r, "hintId"), &hintId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hintId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchTournamentsTournamentIdTasksTaskIdHintsHintId(w, r, tournamentId, taskId, hintId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tournaments", wrapper.GetTournaments)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tournaments/{tournamentId}/", wrapper.GetTournamentsTournamentId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tournaments/{tournamentId}/tasks/{taskId}", wrapper.GetTournamentsTournamentIdTasksTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/tournaments/{tournamentId}/tasks/{taskId}", wrapper.PatchTournamentsTournamentIdTasksTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tournaments/{tournamentId}/tasks/{taskId}/hints/{hintId}", wrapper.GetTournamentsTournamentIdTasksTaskIdHintsHintId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/tournaments/{tournamentId}/tasks/{taskId}/hints/{hintId}", wrapper.PatchTournamentsTournamentIdTasksTaskIdHintsHintId)
	})

	return r
}
